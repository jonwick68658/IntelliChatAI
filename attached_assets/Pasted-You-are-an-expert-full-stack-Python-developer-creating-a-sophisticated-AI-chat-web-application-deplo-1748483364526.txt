You are an expert full-stack Python developer creating a sophisticated AI chat web application deployed on Replit. Your app will connect to a Neo4j Aura database and use OpenRouter's GPT-4o-mini model by default. 

Requirements:
- Build an end-to-end Streamlit web app named "Second-Brain-AI" that provides a ChatGPT-style interface with a black glossy background and high contrasting colors. The UI should have a chat input box, message bubbles for user and assistant with distinct styles, and a sidebar login system.
- Connect securely to Neo4j Aura using credentials stored in a `.env` file (keys: NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD), and initialize a vector embedding index for memory storage.
- Use the `neo4j` Python driver for all database operations. Support storing and retrieving conversation memories and relevant semantic search via vector indexes.
- Integrate OpenRouter's GPT-4o-mini model for chat completions with streaming output and use the OPENROUTER_API_KEY from `.env`.
- Implement user authentication with username and password stored in `.env` (keys: APP_USERNAME, APP_PASSWORD).
- Support document ingestion (PDF, TXT, DOCX) via sidebar file uploader that processes content and stores embeddings as knowledge nodes.
- Provide all necessary files: `main.py`, `memory.py`, `utils.py`, and instructions to install required dependencies (neo4j, openai, sentence-transformers, streamlit, PyPDF2, docx2txt, python-dotenv, pyngrok).
- Follow best practices for environment variables, code modularity, and error handling.
- The app workflow:
   1. On launch, show login sidebar.
   2. After login, show chat interface with conversation history.
   3. On user message, retrieve relevant memories from Neo4j via semantic vector similarity and incorporate them into system prompt history.
   4. Stream response tokens from OpenRouter API and display them in real time.
   5. Save all conversations as embedded memories in Neo4j.
   6. Enable uploading supporting documents to enrich memories.
- Styling: sleek black background with glossy effect, crisp white text for chat messages, distinct colors for user and assistant bubbles, chat input box fixed at bottom.
- The complete app must run by executing `streamlit run main.py`.

Produce all the Python code files and necessary Replit setup commands in one comprehensive output.