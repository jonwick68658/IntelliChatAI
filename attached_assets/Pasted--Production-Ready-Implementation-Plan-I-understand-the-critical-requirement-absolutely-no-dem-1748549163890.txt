### Production-Ready Implementation Plan

I understand the critical requirement: absolutely no demo data. All UI elements must be fully integrated with the NeuroLM backend. Here's the detailed production implementation plan for the agent:

---

### 1. Navigation Structure Implementation
**Complete implementation required for all pages:**
```python
# main.py - Navigation Router
selected_page = "Chat"  # Default page

with st.sidebar:
    st.markdown("""
    <div class="nav-item" onclick="selectPage('Chat')">
      <span style="display: block; font-weight:500;">üß† Neuro Chat</span>
    </div>
    
    <div class="nav-item" onclick="selectPage('Analytics')">
      <span style="display: block; font-weight:500;">üìä Memory Analytics</span>
    </div>
    
    <div class="nav-item" onclick="selectPage('Explorer')">
      <span style="display: block; font-weight:500;">üîç Memory Explorer</span>
    </div>
    """, unsafe_allow_html=True)
    
    # Navigation JS controller
    st.markdown("""
    <script>
    function selectPage(pageName) {
        Streamlit.setComponentValue({page: pageName});
    }
    </script>
    """, unsafe_allow_html=True)
    
    # Get page selection from JS
    page_event = st.empty()
    if page_event.component_event:
        selected_page = page_event.component_event["page"]

# Render selected page
if selected_page == "Chat":
    chat_interface()
elif selected_page == "Analytics":
    analytics_dashboard()
elif selected_page == "Explorer":
    memory_explorer()
```

---

### 2. User Profile Implementation
**Real data integration:**
```python
# auth.py - Add user info retrieval
def get_user_info(user_id):
    with GraphDatabase.driver(uri, auth=(user, passwd)).session() as session:
        return session.run("""
        MATCH (u:User {id: $user_id})
        RETURN u.name AS name, u.email AS email, u.created_at AS created
        """, user_id=user_id).single()

# main.py sidebar integration
current_user = auth.get_current_user()
user_info = auth.get_user_info(current_user["id"])

with st.sidebar:
    st.markdown(f"""
    <div style="position: absolute; bottom: 0; left: 0; right: 0; padding: 1.5rem; background: var(--surface-1); border-top: 1px solid #252525;">
      <div style="display: flex; align-items: center;">
        <div style="width: 40px; height: 40px; border-radius: 8px; background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary)); display: flex; align-items: center; justify-content: center; margin-right: 12px;">
          <span style="color: white; font-weight: 700;">{user_info['name'][0]}</span>
        </div>
        <div>
          <div style="font-weight: 500;">{user_info['name']}</div>
          <div style="font-size: 0.9rem; color: var(--text-secondary);">
            Member since {user_info['created'].strftime('%b %Y')}
          </div>
        </div>
      </div>
    </div>
    """, unsafe_allow_html=True)
```

---

### 3. Neural Activity Widget with Live Data
**Real data integration from Neo4j:**
```python
# stats.py
def get_neural_stats(user_id):
    with GraphDatabase.driver(uri, auth=(user, passwd)).session() as session:
        stats = session.run("""
        MATCH (u:User {id: $user_id})-[:CREATED]->(m)
        RETURN 
          count(m) AS memory_count,
          size(apoc.coll.toSet([(m)-[:ABOUT]->(t) | t.name])) AS topic_count,
          avg(m.confidence) * 100 AS confidence_pct
        """, user_id=user_id).single()
        return dict(stats)

# dashboard.py
def neural_activity_widget(user_id):
    stats = get_neural_stats(user_id)
    
    st.markdown(f"""
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem;">
      <div style="background: var(--surface-2); border-radius: 12px; padding: 1rem; text-align: center;">
        <div style="font-size: 2rem; font-weight: 700; color: var(--accent-primary);">
          {stats['memory_count']}
        </div>
        <div style="color: var(--text-secondary);">Memories</div>
      </div>
      
      <div style="background: var(--surface-2); border-radius: 12px; padding: 1rem; text-align: center;">
        <div style="font-size: 2rem; font-weight: 700; color: var(--accent-secondary);">
          {int(stats['topic_count'])}
        </div>
        <div style="color: var(--text-secondary);">Topics</div>
      </div>
      
      <div style="background: var(--surface-2); border-radius: 12px; padding: 1rem; text-align: center;">
        <div style="font-size: 2rem; font-weight: 700; color: var(--highlight);">
          {int(stats['confidence_pct'])}%
        </div>
        <div style="color: var(--text-secondary);">Confidence</div>
      </div>
    </div>
    """, unsafe_allow_html=True)
```

---

### 4. Chat Message Components
**Complete replacement strategy:**
```python
# Interactive component to replace st.chat_message
def neural_message(content, sender="AI", timestamp=None, sources=None):
    if sender == "AI":
        # Sources tooltip if available
        source_html = ""
        if sources:
            source_list = "\n".join(f"<li>{src}</li>" for src in sources[:3])
            source_html = f"""
            <div style="margin-top: 12px; font-size: 0.85rem; color: var(--text-secondary);">
              <div style="display: flex; align-items: center; gap: 8px;">
                <span>üß† Neural Sources</span>
                <span style="background: rgba(187,134,252,0.2); border-radius: 12px; padding: 2px 8px; font-size: 0.75rem;">
                  {len(sources)}
                </span>
              </div>
              <ul style="margin: 8px 0 0 20px; padding: 0; opacity: 0.8;">
                {source_list}
              </ul>
            </div>
            """
        
        timestamp_html = f"""<div style="position: absolute; right: 16px; top: 16px; font-size: 0.75rem; color: var(--text-secondary);">
          {timestamp.strftime('%H:%M') if timestamp else ''}
        </div>""" if timestamp else ""
        
        st.markdown(f"""
        <div class="stChatMessage" style="border-left: 3px solid var(--accent-secondary); position: relative;">
          {timestamp_html}
          <div style="display: flex; align-items: center; margin-bottom: 12px;">
            <div style="width: 32px; height: 32px; background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary)); border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-right: 12px;">
              <span style="color: white; font-weight: 800; font-size: 14px;">NL</span>
            </div>
            <div>
              <div style="font-weight: 700; color: var(--accent-secondary);">NeuroLM</div>
              <div style="font-size: 0.85rem; color: var(--text-secondary);">Neural Language Model</div>
            </div>
          </div>
          <div style="color: var(--text-primary); line-height: 1.7; font-size: 1.1rem;">
            {content}
          </div>
          {source_html}
        </div>
        """, unsafe_allow_html=True)
    else:
        # Similar structure for user messages without sources
        # ... (implementation for user messages)
```

**Implementation strategy:**
1. Replace ALL `st.chat_message` calls with `neural_message`
2. Pass real data to parameters:
   - `content`: Generated response text
   - `timestamp`: Actual message timestamp
   - `sources`: List of memory sources used (from retrieval)
3. Animate new messages with JS:
   ```javascript
   function fadeInNewMessages() {
     document.querySelectorAll('.stChatMessage:last-child').forEach(el => {
       el.animate([{opacity: 0}, {opacity: 1}], {duration: 300});
     });
   }
   ```

---

### Production Implementation Sequence

1. **Theme Foundation (3 hrs)**
   - Implement base CSS with contrast fixes
   - Add neural background pattern
   - Set up font integration

2. **Navigation System (2 hrs)**
   - Build sidebar routing
   - Implement page switching logic
   - Connect authentication flow

3. **Chat System (4 hrs)**
   - Replace all chat bubbles
   - Integrate source attribution
   - Add timing animations

4. **Data Integration (3 hrs)**
   - Implement stats queries
   - Connect memory explorer
   - Bind profile system

5. **Final QA (2 hrs)**
   - Accessibility audit (
   - Performance profiling
   - Cross-browser testing

---

### Critical Implementation Directives
1. **No demo data** - All metrics must come from:
   ```python
   # Neo4j Query Examples
   total_memories = "MATCH (u:User {id: $user_id})-[:CREATED]->(m) RETURN count(m)"
   topics = "MATCH (u:User {id: $user_id})-[:CREATED]->(m)-[:ABOUT]->(t) RETURN count(distinct t)"
   ```

2. **Remove all testing placeholders** - Delete placeholder texts with `<!-- PLACEHOLDER -->`

3. **Pure production data flows** - Never display hardcoded numbers or text examples

4. **Fully functional navigation** - All sidebar items must work with real pages

5. **Complete message replacement** - Zero Streamlit default chat components remain

This plan ensures a shippable production UI where every component serves real functionality while maintaining the premium dark theme aesthetic. Would you like me to elaborate on any specific integration detail?